using Application.Features.Inspections.Command.CreateInspection;
using Application.Features.Inspections.Query.GetAllInspection;
using Application.Features.Inspections.Query.GetInspection;

using AutoMapper;

using Domain.Entities;

namespace Application.MappingProfiles;

public class InspectionMappingProfile : Profile
{
    public InspectionMappingProfile()
    {
        CreateMap<CreateInspectionCommand, Inspection>(MemberList.Destination)
            .ForMember(dest => dest.ID, opt => opt.Ignore()) // Auto-generated by DB
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.SnapshotFormTitle, opt => opt.Ignore()) // Set manually in handler
            .ForMember(dest => dest.SnapshotFormDescription, opt => opt.Ignore()) // Set manually in handler
            .ForMember(dest => dest.InspectionForm, opt => opt.Ignore()) // Navigation Property
            .ForMember(dest => dest.Vehicle, opt => opt.Ignore()) // Navigation Property
            .ForMember(dest => dest.User, opt => opt.Ignore()) // Navigation Property
            .ForMember(dest => dest.InspectionPassFailItems, opt => opt.Ignore()); // Navigation Property

        // Query mappings
        CreateMap<Inspection, InspectionDTO>(MemberList.Destination)
            .ForMember(dest => dest.Vehicle, opt => opt.MapFrom(src => src.Vehicle))
            .ForMember(dest => dest.Technician, opt => opt.MapFrom(src => src.User))
            .ForMember(dest => dest.InspectionForm, opt => opt.MapFrom(src => src.InspectionForm))
            .ForMember(dest => dest.InspectionItems, opt => opt.MapFrom(src => src.InspectionPassFailItems));

        // GetAllInspection query mapping
        CreateMap<Inspection, GetAllInspectionDTO>(MemberList.Destination)
            .ForMember(dest => dest.VehicleName, opt => opt.MapFrom(src => src.Vehicle != null ? src.Vehicle.Name : string.Empty))
            .ForMember(dest => dest.TechnicianName, opt => opt.MapFrom(src => src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : string.Empty))
            .ForMember(dest => dest.InspectionItemsCount, opt => opt.MapFrom(src => src.InspectionPassFailItems != null ? src.InspectionPassFailItems.Count : 0))
            .ForMember(dest => dest.PassedItemsCount, opt => opt.MapFrom(src => src.InspectionPassFailItems != null ? src.InspectionPassFailItems.Count(i => i.Passed) : 0))
            .ForMember(dest => dest.FailedItemsCount, opt => opt.MapFrom(src => src.InspectionPassFailItems != null ? src.InspectionPassFailItems.Count(i => !i.Passed) : 0));

        // Related entity mappings
        CreateMap<Vehicle, VehicleInfoDTO>(MemberList.Destination);
        CreateMap<User, TechnicianInfoDTO>(MemberList.Destination);
        CreateMap<InspectionForm, InspectionFormInfoDTO>(MemberList.Destination);
        CreateMap<InspectionPassFailItem, InspectionItemDTO>(MemberList.Destination)
            .ForMember(dest => dest.SnapshotItemLabel, opt => opt.MapFrom(src => src.SnapshotItemLabel))
            .ForMember(dest => dest.SnapshotItemDescription, opt => opt.MapFrom(src => src.SnapshotItemDescription))
            .ForMember(dest => dest.SnapshotItemInstructions, opt => opt.MapFrom(src => src.SnapshotItemInstructions))
            .ForMember(dest => dest.SnapshotIsRequired, opt => opt.MapFrom(src => src.SnapshotIsRequired))
            .ForMember(dest => dest.SnapshotInspectionFormItemType, opt => opt.MapFrom(src => src.SnapshotInspectionFormItemTypeEnum));
    }
}