using Application.Features.Inspections.Command.CreateInspection;
using Application.Features.Inspections.Query.GetAllInspection;
using Application.Features.Inspections.Query.GetInspection;

using AutoMapper;

using Domain.Entities;

namespace Application.MappingProfiles;

public class InspectionMappingProfile : Profile
{
    public InspectionMappingProfile()
    {
        CreateMap<CreateInspectionCommand, Inspection>(MemberList.Destination)
            .ForMember(dest => dest.ID, opt => opt.Ignore()) // Auto-generated by DB
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.SnapshotFormTitle, opt => opt.Ignore()) // Set manually in handler
            .ForMember(dest => dest.SnapshotFormDescription, opt => opt.Ignore()) // Set manually in handler
            .ForMember(dest => dest.InspectionForm, opt => opt.Ignore()) // Navigation Property
            .ForMember(dest => dest.Vehicle, opt => opt.Ignore()) // Navigation Property
            .ForMember(dest => dest.User, opt => opt.Ignore()) // Navigation Property
            .ForMember(dest => dest.InspectionPassFailItems, opt => opt.Ignore()); // Navigation Property

        // CreateMap<Inspection, GetAllInspectionDTO>()
        //     .ForMember(dest => dest.VehicleName, opt => opt.MapFrom(src => src.Vehicle != null ? src.Vehicle.Name : null))
        //     .ForMember(dest => dest.TechnicianName, opt => opt.MapFrom(src => src.User != null ? $"{src.User.FirstName} {src.User.LastName}" : null))
        //     .ForMember(dest => dest.TotalInspectionItems, opt => opt.MapFrom(src => src.InspectionPassFailItems.Count))
        //     .ForMember(dest => dest.PassedItems, opt => opt.MapFrom(src => src.InspectionPassFailItems.Count(i => i.Passed)))
        //     .ForMember(dest => dest.FailedItems, opt => opt.MapFrom(src => src.InspectionPassFailItems.Count(i => !i.Passed)));

        // CreateMap<Inspection, InspectionDTO>()
        //     .ForMember(dest => dest.Vehicle, opt => opt.MapFrom(src => src.Vehicle))
        //     .ForMember(dest => dest.Technician, opt => opt.MapFrom(src => src.User))
        //     .ForMember(dest => dest.InspectionForm, opt => opt.MapFrom(src => src.InspectionForm))
        //     .ForMember(dest => dest.InspectionItems, opt => opt.MapFrom(src => src.InspectionPassFailItems));

        // CreateMap<Vehicle, VehicleInfoDTO>();
        // CreateMap<User, TechnicianInfoDTO>();
        // CreateMap<InspectionForm, InspectionFormInfoDTO>();
        // CreateMap<InspectionPassFailItem, InspectionItemDTO>()
        //     .ForMember(dest => dest.ItemLabel, opt => opt.MapFrom(src => src.InspectionFormItem.ItemLabel))
        //     .ForMember(dest => dest.ItemDescription, opt => opt.MapFrom(src => src.InspectionFormItem.ItemDescription))
        //     .ForMember(dest => dest.ItemInstructions, opt => opt.MapFrom(src => src.InspectionFormItem.ItemInstructions))
        //     .ForMember(dest => dest.IsRequired, opt => opt.MapFrom(src => src.InspectionFormItem.IsRequired))
        //     .ForMember(dest => dest.InspectionFormItemType, opt => opt.MapFrom(src => src.InspectionFormItem.InspectionFormItemTypeEnum));
    }
}