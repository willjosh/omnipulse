using Application.Features.InspectionForms.Command.CreateInspectionForm;
using Application.Features.InspectionForms.Command.UpdateInspectionForm;
using Application.Features.InspectionForms.Query;

using AutoMapper;

using Domain.Entities;

namespace Application.MappingProfiles;

public class InspectionFormMappingProfile : Profile
{
    public InspectionFormMappingProfile()
    {
        // CreateInspectionForm
        CreateMap<CreateInspectionFormCommand, InspectionForm>(MemberList.Destination)
            .ForMember(dest => dest.ID, opt => opt.Ignore()) // Auto-generated by DB
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.Inspections, opt => opt.Ignore()) // Navigation Collection
            .ForMember(dest => dest.InspectionFormItems, opt => opt.Ignore()); // Navigation Collection

        // UpdateInspectionForm
        CreateMap<UpdateInspectionFormCommand, InspectionForm>(MemberList.Destination)
            .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID should not be updated
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // Should not be updated
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore()) // Set by BaseEntity
            .ForMember(dest => dest.Inspections, opt => opt.Ignore()) // Navigation Collection
            .ForMember(dest => dest.InspectionFormItems, opt => opt.Ignore()); // Navigation Collection

        // GetInspectionForm
        CreateMap<InspectionForm, InspectionFormDTO>(MemberList.Destination)
            .ForMember(dest => dest.InspectionCount, opt => opt.Ignore()) // Set manually in handler
            .ForMember(dest => dest.InspectionFormItemCount, opt => opt.Ignore()); // Set manually in handler
    }
}