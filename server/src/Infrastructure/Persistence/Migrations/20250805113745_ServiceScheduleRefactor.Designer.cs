// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DatabaseContext;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(OmnipulseDatabaseContext))]
    [Migration("20250805113745_ServiceScheduleRefactor")]
    partial class ServiceScheduleRefactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.FuelPurchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuelStation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("OdometerReading")
                        .HasColumnType("float");

                    b.Property<decimal>("PricePerUnit")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchasedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseDate");

                    b.HasIndex("PurchasedByUserId");

                    b.HasIndex("ReceiptNumber")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.HasIndex("PurchaseDate", "VehicleId");

                    b.HasIndex("VehicleId", "PurchaseDate");

                    b.ToTable("FuelPurchases", null, t =>
                        {
                            t.HasCheckConstraint("CK_FuelPurchase_OdometerReading", "OdometerReading >= 0");

                            t.HasCheckConstraint("CK_FuelPurchase_PricePerUnit", "PricePerUnit > 0");

                            t.HasCheckConstraint("CK_FuelPurchase_PurchaseDate", "PurchaseDate >= '2000-01-01' AND PurchaseDate <= GETDATE()");

                            t.HasCheckConstraint("CK_FuelPurchase_TotalCost", "TotalCost > 0");

                            t.HasCheckConstraint("CK_FuelPurchase_Volume", "Volume > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Inspection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InspectionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InspectionFormID")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<double?>("OdometerReading")
                        .HasColumnType("float");

                    b.Property<string>("SnapshotFormDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotFormTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicianID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleCondition")
                        .HasColumnType("int");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InspectionFormID");

                    b.HasIndex("InspectionStartTime");

                    b.HasIndex("TechnicianID");

                    b.HasIndex("VehicleCondition");

                    b.HasIndex("VehicleID");

                    b.HasIndex("InspectionFormID", "InspectionStartTime");

                    b.HasIndex("TechnicianID", "InspectionStartTime");

                    b.HasIndex("VehicleID", "InspectionStartTime");

                    b.ToTable("Inspections", null, t =>
                        {
                            t.HasCheckConstraint("CK_Inspection_InspectionStartTime", "InspectionStartTime >= '2000-01-01' AND InspectionStartTime <= GETDATE()");

                            t.HasCheckConstraint("CK_Inspection_OdometerReading", "OdometerReading >= 0");

                            t.HasCheckConstraint("CK_Inspection_Times", "InspectionEndTime >= InspectionStartTime");
                        });
                });

            modelBuilder.Entity("Domain.Entities.InspectionForm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("InspectionForms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InspectionFormItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InspectionFormID")
                        .HasColumnType("int");

                    b.Property<int>("InspectionFormItemTypeEnum")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemInstructions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ItemLabel")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("InspectionFormID");

                    b.HasIndex("IsRequired");

                    b.HasIndex("InspectionFormID", "ItemLabel")
                        .IsUnique();

                    b.ToTable("InspectionFormItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InspectionPassFailItem", b =>
                {
                    b.Property<int>("InspectionID")
                        .HasColumnType("int");

                    b.Property<int>("InspectionFormItemID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<int>("SnapshotInspectionFormItemTypeEnum")
                        .HasColumnType("int");

                    b.Property<bool>("SnapshotIsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SnapshotItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotItemInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotItemLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InspectionID", "InspectionFormItemID");

                    b.HasIndex("InspectionFormItemID");

                    b.HasIndex("Passed");

                    b.ToTable("InspectionPassFailItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryItemID")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryItemLocationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRestockedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxStockLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MinStockLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("NeedsReorder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("QuantityOnHand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("UnitCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Inventories_CreatedAt");

                    b.HasIndex("InventoryItemID")
                        .HasDatabaseName("IX_Inventories_InventoryItemID");

                    b.HasIndex("InventoryItemLocationID")
                        .HasDatabaseName("IX_Inventories_InventoryItemLocationID");

                    b.HasIndex("LastRestockedDate")
                        .HasDatabaseName("IX_Inventories_LastRestockedDate");

                    b.HasIndex("NeedsReorder")
                        .HasDatabaseName("IX_Inventories_NeedsReorder")
                        .HasFilter("[NeedsReorder] = 1");

                    b.HasIndex("UnitCost")
                        .HasDatabaseName("IX_Inventories_UnitCost");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Inventories_UpdatedAt");

                    b.HasIndex("InventoryItemID", "UnitCost")
                        .HasDatabaseName("IX_Inventories_Item_Cost");

                    b.HasIndex("InventoryItemLocationID", "InventoryItemID")
                        .HasDatabaseName("IX_Inventories_Location_Item");

                    b.HasIndex("InventoryItemLocationID", "QuantityOnHand")
                        .HasDatabaseName("IX_Inventories_Location_Stock");

                    b.HasIndex("LastRestockedDate", "InventoryItemID")
                        .HasDatabaseName("IX_Inventories_RestockDate_Item");

                    b.HasIndex("QuantityOnHand", "MinStockLevel")
                        .HasDatabaseName("IX_Inventories_StockLevels");

                    b.HasIndex("InventoryItemID", "LastRestockedDate", "QuantityOnHand")
                        .HasDatabaseName("IX_Inventories_ItemPerformance");

                    b.HasIndex("InventoryItemLocationID", "QuantityOnHand", "UnitCost")
                        .HasDatabaseName("IX_Inventories_LocationSummary");

                    b.HasIndex("QuantityOnHand", "MinStockLevel", "InventoryItemID")
                        .HasDatabaseName("IX_Inventories_LowStock");

                    b.HasIndex("QuantityOnHand", "UnitCost", "InventoryItemID")
                        .HasDatabaseName("IX_Inventories_ValueAnalysis");

                    b.HasIndex("UpdatedAt", "QuantityOnHand", "InventoryItemID")
                        .HasDatabaseName("IX_Inventories_StockMovement");

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InventoryItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitCostMeasurementUnit")
                        .HasColumnType("int");

                    b.Property<string>("UniversalProductCode")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("WeightKG")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_InventoryItems_Category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_InventoryItems_IsActive");

                    b.HasIndex("ItemName")
                        .HasDatabaseName("IX_InventoryItems_ItemName");

                    b.HasIndex("ItemNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_InventoryItems_ItemNumber_Unique");

                    b.HasIndex("Manufacturer")
                        .HasDatabaseName("IX_InventoryItems_Manufacturer");

                    b.HasIndex("UniversalProductCode")
                        .IsUnique()
                        .HasDatabaseName("IX_InventoryItems_UniversalProductCode_Unique")
                        .HasFilter("[UniversalProductCode] IS NOT NULL");

                    b.HasIndex("IsActive", "Category")
                        .HasDatabaseName("IX_InventoryItems_IsActive_Category");

                    b.HasIndex("Manufacturer", "ManufacturerPartNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_InventoryItems_Manufacturer_PartNumber_Unique")
                        .HasFilter("[Manufacturer] IS NOT NULL AND [ManufacturerPartNumber] IS NOT NULL");

                    b.ToTable("InventoryItems", null, t =>
                        {
                            t.HasCheckConstraint("CK_InventoryItem_UPC_Length", "([UniversalProductCode] IS NULL OR LEN([UniversalProductCode]) = 12)");

                            t.HasCheckConstraint("CK_InventoryItem_UnitCost_NonNegative", "([UnitCost] IS NULL OR [UnitCost] >= 0)");

                            t.HasCheckConstraint("CK_InventoryItem_WeightKG_NonNegative", "([WeightKG] IS NULL OR [WeightKG] >= 0)");
                        });
                });

            modelBuilder.Entity("Domain.Entities.InventoryItemLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("InventoryItemLocations");
                });

            modelBuilder.Entity("Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<string>("PerformedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WorkOrderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InventoryTransactions_CreatedAt");

                    b.HasIndex("InventoryID")
                        .HasDatabaseName("IX_InventoryTransactions_InventoryID");

                    b.HasIndex("PerformedByUserID")
                        .HasDatabaseName("IX_InventoryTransactions_PerformedByUserID");

                    b.HasIndex("TransactionType")
                        .HasDatabaseName("IX_InventoryTransactions_TransactionType");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_InventoryTransactions_UpdatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderID");

                    b.ToTable("InventoryTransactions", null, t =>
                        {
                            t.HasCheckConstraint("CK_InventoryTransaction_Quantity_Positive", "[Quantity] > 0");

                            t.HasCheckConstraint("CK_InventoryTransaction_TotalCost_NonNegative", "[TotalCost] >= 0");

                            t.HasCheckConstraint("CK_InventoryTransaction_UnitCost_NonNegative", "[UnitCost] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .HasColumnType("int");

                    b.Property<string>("GeneratedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WorkOrderID");

                    b.HasIndex("GeneratedByUserID");

                    b.HasIndex("InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("PaymentDate");

                    b.HasIndex("Status");

                    b.ToTable("Invoices", null, t =>
                        {
                            t.HasCheckConstraint("CK_Invoice_PaymentDate", "PaymentDate IS NULL OR PaymentDate >= InvoiceDate");

                            t.HasCheckConstraint("CK_Invoice_TaxAmount", "TaxAmount >= 0");

                            t.HasCheckConstraint("CK_Invoice_TotalAmount", "TotalAmount >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Issue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("InspectionID")
                        .HasColumnType("int");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<string>("ReportedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ReportedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ResolvedByUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("InspectionID");

                    b.HasIndex("PriorityLevel");

                    b.HasIndex("ReportedByUserID");

                    b.HasIndex("ResolvedByUserID");

                    b.HasIndex("Status");

                    b.HasIndex("VehicleID");

                    b.HasIndex("VehicleID1");

                    b.ToTable("Issues", null, t =>
                        {
                            t.HasCheckConstraint("CK_Issue_ResolvedDate", "ResolvedDate IS NULL OR ResolvedDate >= ReportedDate");
                        });
                });

            modelBuilder.Entity("Domain.Entities.IssueAssignment", b =>
                {
                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UnassignedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IssueID", "AssignedToUserID");

                    b.HasIndex("AssignedDate");

                    b.HasIndex("AssignedToUserID");

                    b.HasIndex("IsActive");

                    b.HasIndex("IssueID");

                    b.ToTable("IssueAssignments", null, t =>
                        {
                            t.HasCheckConstraint("CK_IssueAssignment_UnassignedDate", "UnassignedDate IS NULL OR UnassignedDate >= AssignedDate");
                        });
                });

            modelBuilder.Entity("Domain.Entities.IssueAttachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FileType");

                    b.HasIndex("IssueID");

                    b.HasIndex("UploadedByUserID");

                    b.HasIndex("UserId");

                    b.ToTable("IssueAttachments", null, t =>
                        {
                            t.HasCheckConstraint("CK_IssueAttachment_FileSize", "FileSize > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("MileageAtService")
                        .HasColumnType("float");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceTaskID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkOrderID")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ServiceDate");

                    b.HasIndex("ServiceTaskID");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderID");

                    b.HasIndex("WorkOrderID1");

                    b.ToTable("MaintenanceHistories", null, t =>
                        {
                            t.HasCheckConstraint("CK_MaintenanceHistory_ServiceDate", "ServiceDate >= CreatedAt");
                        });
                });

            modelBuilder.Entity("Domain.Entities.ServiceProgram", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServicePrograms", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ServiceReminder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DueMileage")
                        .HasColumnType("float");

                    b.Property<double?>("MeterVariance")
                        .HasColumnType("float");

                    b.Property<int?>("MileageBuffer")
                        .HasColumnType("int");

                    b.Property<double?>("MileageInterval")
                        .HasColumnType("float");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceProgramID")
                        .HasColumnType("int");

                    b.Property<string>("ServiceProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("ServiceScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeBufferUnit")
                        .HasColumnType("int");

                    b.Property<int?>("TimeBufferValue")
                        .HasColumnType("int");

                    b.Property<int?>("TimeIntervalUnit")
                        .HasColumnType("int");

                    b.Property<int?>("TimeIntervalValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DueDate");

                    b.HasIndex("PriorityLevel");

                    b.HasIndex("ServiceProgramID");

                    b.HasIndex("ServiceScheduleID");

                    b.HasIndex("Status");

                    b.HasIndex("VehicleID");

                    b.HasIndex("WorkOrderID");

                    b.HasIndex("Status", "DueDate");

                    b.HasIndex("VehicleID", "DueDate");

                    b.ToTable("ServiceReminders", null, t =>
                        {
                            t.HasCheckConstraint("CK_ServiceReminder_CompletedDate", "CompletedDate IS NULL OR CompletedDate >= CreatedAt");

                            t.HasCheckConstraint("CK_ServiceReminder_DueDate", "DueDate >= CreatedAt");

                            t.HasCheckConstraint("CK_ServiceReminder_DueMileage", "DueMileage >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.ServiceSchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstServiceMileage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MileageBuffer")
                        .HasColumnType("int");

                    b.Property<int?>("MileageInterval")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServiceProgramID")
                        .HasColumnType("int");

                    b.Property<string>("TimeBufferUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeBufferValue")
                        .HasColumnType("int");

                    b.Property<string>("TimeIntervalUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeIntervalValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("ServiceProgramID");

                    b.HasIndex("IsActive", "Name");

                    b.HasIndex("ServiceProgramID", "IsActive");

                    b.HasIndex("ServiceProgramID", "Name")
                        .IsUnique();

                    b.ToTable("ServiceSchedules", null, t =>
                        {
                            t.HasCheckConstraint("CK_ServiceSchedule_FirstServiceMileage", "FirstServiceMileage >= 0");

                            t.HasCheckConstraint("CK_ServiceSchedule_MileageBuffer", "MileageBuffer >= 0");

                            t.HasCheckConstraint("CK_ServiceSchedule_MileageInterval", "MileageInterval > 0");

                            t.HasCheckConstraint("CK_ServiceSchedule_TimeBufferValue", "TimeBufferValue >= 0");

                            t.HasCheckConstraint("CK_ServiceSchedule_TimeIntervalValue", "TimeIntervalValue > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.ServiceTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("EstimatedCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("EstimatedLabourHours")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Category");

                    b.HasIndex("EstimatedCost");

                    b.HasIndex("EstimatedLabourHours");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Category", "IsActive");

                    b.HasIndex("IsActive", "EstimatedCost");

                    b.ToTable("ServiceTasks", null, t =>
                        {
                            t.HasCheckConstraint("CK_ServiceTask_EstimatedCost", "EstimatedCost >= 0");

                            t.HasCheckConstraint("CK_ServiceTask_EstimatedLabourHours", "EstimatedLabourHours >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FirstName");

                    b.HasIndex("HireDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastName");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("FirstName", "LastName");

                    b.HasIndex("IsActive", "Email");

                    b.HasIndex("IsActive", "HireDate");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_HireDate", "HireDate >= '1900-01-01' AND HireDate <= GETDATE()");

                            t.HasCheckConstraint("CK_User_Timestamps", "UpdatedAt >= CreatedAt");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AssignedTechnicianID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("EngineHours")
                        .HasColumnType("float");

                    b.Property<double>("FuelCapacity")
                        .HasColumnType("float");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LicensePlateExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Mileage")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Trim")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("VehicleGroupID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssignedTechnicianID");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.HasIndex("VehicleGroupID");

                    b.ToTable("Vehicles", null, t =>
                        {
                            t.HasCheckConstraint("CK_Vehicle_EngineHours", "EngineHours >= 0");

                            t.HasCheckConstraint("CK_Vehicle_FuelCapacity", "FuelCapacity > 0");

                            t.HasCheckConstraint("CK_Vehicle_Mileage", "Mileage >= 0");

                            t.HasCheckConstraint("CK_Vehicle_PurchasePrice", "PurchasePrice >= 0");

                            t.HasCheckConstraint("CK_Vehicle_Year", "Year > 1885 AND Year <= 2100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehicleAlert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcknowledgedByUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AlertLevel")
                        .HasColumnType("int");

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AcknowledgedByUserID");

                    b.HasIndex("AlertLevel");

                    b.HasIndex("AlertType");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsAcknowledged");

                    b.HasIndex("IsDismissed");

                    b.HasIndex("VehicleID");

                    b.HasIndex("AlertLevel", "IsAcknowledged");

                    b.HasIndex("CreatedByUserID", "IsAcknowledged");

                    b.HasIndex("ExpiresAt", "IsAcknowledged");

                    b.HasIndex("IsAcknowledged", "IsDismissed");

                    b.HasIndex("VehicleID", "IsAcknowledged");

                    b.ToTable("VehicleAlerts", null, t =>
                        {
                            t.HasCheckConstraint("CK_VehicleAlert_AcknowledgedAt", "AcknowledgedAt IS NULL OR (IsAcknowledged = 1 AND AcknowledgedAt >= CreatedAt)");

                            t.HasCheckConstraint("CK_VehicleAlert_AcknowledgedByUserID", "AcknowledgedByUserID IS NULL OR IsAcknowledged = 1");

                            t.HasCheckConstraint("CK_VehicleAlert_ExpiresAt", "ExpiresAt IS NULL OR ExpiresAt > CreatedAt");
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehicleAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedToUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UnassignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleID");

                    b.ToTable("VehicleAssignment");
                });

            modelBuilder.Entity("Domain.Entities.VehicleDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DocumentType");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("UploadedByUserID");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleID");

                    b.ToTable("VehicleDocuments", null, t =>
                        {
                            t.HasCheckConstraint("CK_VehicleDocument_ExpiryDate", "ExpiryDate IS NULL OR ExpiryDate >= CreatedAt");

                            t.HasCheckConstraint("CK_VehicleDocument_FileSize", "FileSize > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehicleGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VehicleGroups", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("ImageLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UploadedByUserID");

                    b.HasIndex("VehicleID");

                    b.ToTable("VehicleImages", null, t =>
                        {
                            t.HasCheckConstraint("CK_VehicleImage_FileSize", "FileSize > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.WorkOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedToUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<double?>("EndOdometer")
                        .HasColumnType("float");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("StartOdometer")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActualCompletionDate");

                    b.HasIndex("ActualStartDate");

                    b.HasIndex("AssignedToUserID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PriorityLevel");

                    b.HasIndex("ScheduledCompletionDate");

                    b.HasIndex("ScheduledStartDate");

                    b.HasIndex("Status");

                    b.HasIndex("VehicleID");

                    b.HasIndex("WorkOrderType");

                    b.HasIndex("AssignedToUserID", "Status");

                    b.HasIndex("Status", "PriorityLevel");

                    b.HasIndex("Status", "ScheduledStartDate");

                    b.HasIndex("VehicleID", "Status");

                    b.ToTable("WorkOrders", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkOrder_EndOdometer", "EndOdometer IS NULL OR EndOdometer >= StartOdometer");

                            t.HasCheckConstraint("CK_WorkOrder_StartOdometer", "StartOdometer >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderIssue", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .HasColumnType("int");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkOrderID", "IssueID");

                    b.HasIndex("IssueID");

                    b.HasIndex("WorkOrderID");

                    b.ToTable("WorkOrderIssues", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderLineItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AssignedToUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("InventoryItemID")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<double?>("LaborHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTaskID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkOrderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssignedToUserID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("InventoryItemID");

                    b.HasIndex("ItemType");

                    b.HasIndex("ServiceTaskID");

                    b.HasIndex("WorkOrderID");

                    b.HasIndex("WorkOrderID", "ItemType");

                    b.ToTable("WorkOrderLineItems", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkOrderLineItem_HourlyRate", "HourlyRate IS NULL OR HourlyRate >= 0");

                            t.HasCheckConstraint("CK_WorkOrderLineItem_LaborHours", "LaborHours IS NULL OR LaborHours > 0");

                            t.HasCheckConstraint("CK_WorkOrderLineItem_Quantity", "Quantity > 0");

                            t.HasCheckConstraint("CK_WorkOrderLineItem_TotalCost", "TotalCost >= 0");

                            t.HasCheckConstraint("CK_WorkOrderLineItem_UnitPrice", "UnitPrice IS NULL OR UnitPrice >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.XrefServiceProgramVehicle", b =>
                {
                    b.Property<int>("ServiceProgramID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("VehicleMileageAtAssignment")
                        .HasColumnType("float");

                    b.HasKey("ServiceProgramID", "VehicleID");

                    b.HasIndex("AddedAt");

                    b.HasIndex("ServiceProgramID");

                    b.HasIndex("VehicleID");

                    b.ToTable("XrefServiceProgramVehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.XrefServiceScheduleServiceTask", b =>
                {
                    b.Property<int>("ServiceScheduleID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTaskID")
                        .HasColumnType("int");

                    b.HasKey("ServiceScheduleID", "ServiceTaskID");

                    b.HasIndex("ServiceScheduleID");

                    b.HasIndex("ServiceTaskID");

                    b.HasIndex("ServiceScheduleID", "ServiceTaskID")
                        .IsUnique();

                    b.ToTable("XrefServiceScheduleServiceTasks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "749b52f3-45b7-4613-bfa6-1fd13790ef01",
                            Name = "FleetManager",
                            NormalizedName = "FLEETMANAGER"
                        },
                        new
                        {
                            Id = "996d88fd-4d3b-4920-a4ad-40ab4b941b04",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FuelPurchase", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("PurchasedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.Inspection", b =>
                {
                    b.HasOne("Domain.Entities.InspectionForm", "InspectionForm")
                        .WithMany("Inspections")
                        .HasForeignKey("InspectionFormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Inspections")
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Inspections")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InspectionForm");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.InspectionFormItem", b =>
                {
                    b.HasOne("Domain.Entities.InspectionForm", "InspectionForm")
                        .WithMany("InspectionFormItems")
                        .HasForeignKey("InspectionFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionForm");
                });

            modelBuilder.Entity("Domain.Entities.InspectionPassFailItem", b =>
                {
                    b.HasOne("Domain.Entities.InspectionFormItem", "InspectionFormItem")
                        .WithMany()
                        .HasForeignKey("InspectionFormItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Inspection", "Inspection")
                        .WithMany("InspectionPassFailItems")
                        .HasForeignKey("InspectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");

                    b.Navigation("InspectionFormItem");
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Domain.Entities.InventoryItem", "InventoryItem")
                        .WithMany("Inventories")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.InventoryItemLocation", "InventoryItemLocation")
                        .WithMany("Inventories")
                        .HasForeignKey("InventoryItemLocationID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InventoryItem");

                    b.Navigation("InventoryItemLocation");
                });

            modelBuilder.Entity("Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Inventory", "Inventory")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("PerformedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.WorkOrder", null)
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("WorkOrderID");

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("GeneratedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Domain.Entities.Issue", b =>
                {
                    b.HasOne("Domain.Entities.User", "ReportedByUser")
                        .WithMany()
                        .HasForeignKey("ReportedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ResolvedByUser")
                        .WithMany()
                        .HasForeignKey("ResolvedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", null)
                        .WithMany("Issues")
                        .HasForeignKey("VehicleID1");

                    b.Navigation("ReportedByUser");

                    b.Navigation("ResolvedByUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.IssueAssignment", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Issue", "Issue")
                        .WithMany("IssueAssignments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.IssueAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Issue", "Issue")
                        .WithMany("IssueAttachments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UploadedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("IssueAttachments")
                        .HasForeignKey("UserId");

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistory", b =>
                {
                    b.HasOne("Domain.Entities.ServiceTask", null)
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("ServiceTaskID");

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrder", null)
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("WorkOrderID1");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Domain.Entities.ServiceReminder", b =>
                {
                    b.HasOne("Domain.Entities.ServiceProgram", "ServiceProgram")
                        .WithMany()
                        .HasForeignKey("ServiceProgramID");

                    b.HasOne("Domain.Entities.ServiceSchedule", "ServiceSchedule")
                        .WithMany()
                        .HasForeignKey("ServiceScheduleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("ServiceReminders")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderID");

                    b.Navigation("ServiceProgram");

                    b.Navigation("ServiceSchedule");

                    b.Navigation("Vehicle");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Domain.Entities.ServiceSchedule", b =>
                {
                    b.HasOne("Domain.Entities.ServiceProgram", "ServiceProgram")
                        .WithMany("ServiceSchedules")
                        .HasForeignKey("ServiceProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProgram");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("AssignedTechnicianID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.VehicleGroup", "VehicleGroup")
                        .WithMany()
                        .HasForeignKey("VehicleGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VehicleGroup");
                });

            modelBuilder.Entity("Domain.Entities.VehicleAlert", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("AcknowledgedByUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.VehicleAssignment", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("VehicleAssignments")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleAssignments")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.VehicleDocument", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UploadedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("VehicleDocuments")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleDocuments")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.VehicleImage", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UploadedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleImages")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrder", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderIssue", b =>
                {
                    b.HasOne("Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderLineItem", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedToUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.InventoryItem", "InventoryItem")
                        .WithMany("WorkOrderLineItems")
                        .HasForeignKey("InventoryItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ServiceTask", "ServiceTask")
                        .WithMany("WorkOrderLineItems")
                        .HasForeignKey("ServiceTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderLineItems")
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("ServiceTask");

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Domain.Entities.XrefServiceProgramVehicle", b =>
                {
                    b.HasOne("Domain.Entities.ServiceProgram", "ServiceProgram")
                        .WithMany("XrefServiceProgramVehicles")
                        .HasForeignKey("ServiceProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("XrefServiceProgramVehicles")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProgram");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.XrefServiceScheduleServiceTask", b =>
                {
                    b.HasOne("Domain.Entities.ServiceSchedule", "ServiceSchedule")
                        .WithMany("XrefServiceScheduleServiceTasks")
                        .HasForeignKey("ServiceScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServiceTask", "ServiceTask")
                        .WithMany("XrefServiceScheduleServiceTasks")
                        .HasForeignKey("ServiceTaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceSchedule");

                    b.Navigation("ServiceTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Inspection", b =>
                {
                    b.Navigation("InspectionPassFailItems");
                });

            modelBuilder.Entity("Domain.Entities.InspectionForm", b =>
                {
                    b.Navigation("InspectionFormItems");

                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("Domain.Entities.InventoryItem", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("WorkOrderLineItems");
                });

            modelBuilder.Entity("Domain.Entities.InventoryItemLocation", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.Issue", b =>
                {
                    b.Navigation("IssueAssignments");

                    b.Navigation("IssueAttachments");
                });

            modelBuilder.Entity("Domain.Entities.ServiceProgram", b =>
                {
                    b.Navigation("ServiceSchedules");

                    b.Navigation("XrefServiceProgramVehicles");
                });

            modelBuilder.Entity("Domain.Entities.ServiceSchedule", b =>
                {
                    b.Navigation("XrefServiceScheduleServiceTasks");
                });

            modelBuilder.Entity("Domain.Entities.ServiceTask", b =>
                {
                    b.Navigation("MaintenanceHistories");

                    b.Navigation("WorkOrderLineItems");

                    b.Navigation("XrefServiceScheduleServiceTasks");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("IssueAttachments");

                    b.Navigation("MaintenanceHistories");

                    b.Navigation("VehicleAssignments");

                    b.Navigation("VehicleDocuments");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Issues");

                    b.Navigation("ServiceReminders");

                    b.Navigation("VehicleAssignments");

                    b.Navigation("VehicleDocuments");

                    b.Navigation("VehicleImages");

                    b.Navigation("XrefServiceProgramVehicles");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrder", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("Invoices");

                    b.Navigation("MaintenanceHistories");

                    b.Navigation("WorkOrderLineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
