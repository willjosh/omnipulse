#!/bin/sh

FRONTEND_DIR="client"
BACKEND_DIR="server"

set -e

echo "========================================\n\t⚙️ Running pre-commit checks\n========================================"

branch="$(git rev-parse --abbrev-ref HEAD)"
if [ "$branch" = "main" ]; then
  echo "❌ You can't commit directly to main - please check out a branch."
  exit 1
fi

run_step() {
  desc="$1"
  shift
  echo "$desc"
  "$@" || {
    echo "❌ $desc failed ❌"
    exit 1
  }
}

run_frontend_checks() {
    echo "⚙️ Frontend checks"
    pushd "$FRONTEND_DIR" > /dev/null || exit 1

    run_step "▶️ Frontend - Lint" npx lint-staged
    run_step "▶️ Frontend - Build" npm run build

    popd > /dev/null
}

run_backend_checks() {
    echo "⚙️ Backend checks"
    pushd "$BACKEND_DIR" > /dev/null || exit 1

    run_step "▶️ Backend - Build" dotnet build --nologo

    # Format only staged backend files
    backend_staged_files=$(echo "$staged_files" | grep "^$BACKEND_DIR/" | grep -E "\.cs$|\.csproj$|\.props$" | sed "s|^$BACKEND_DIR/||")
    if [ -n "$backend_staged_files" ]; then
        included_files=$(echo "$backend_staged_files" | tr '\n' ' ')

        run_step "▶️ Backend - Format (Staged Files)" dotnet format --include $included_files
        run_step "▶️ Backend - Format (Verify no Changes)" dotnet format --include $included_files --verify-no-changes --verbosity quiet
    fi

    run_step "▶️ Backend - Test" dotnet test

    popd > /dev/null
}

staged_files=$(git diff --cached --name-only --diff-filter=ACM)
printf "📄 Staged Files:\n$staged_files\n"

if echo "$staged_files" | grep -q "^$FRONTEND_DIR/"; then
    run_frontend_checks
fi

if echo "$staged_files" | grep -q "^$BACKEND_DIR/"; then
    run_backend_checks
fi

echo "✅ All pre-commit checks passed!"
